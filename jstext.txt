<!-- FUNCTIONS USED -->

getElementById;vindElementMetId
<!-- To find element with the ID provided -->

innerHTML;inHTML
<!-- To set text in the objects HTML -->

document;document
<!-- Object of the whole web page -->

Block;-
<!-- A block statement is used to group zero or more statements. The block is delimited by a pair of curly brackets. -->

break;-
<!-- Terminates the current loop, switch, or label statement and transfers program control to the statement following the terminated statement. -->

continue;-
<!-- Terminates execution of the statements in the current iteration of the current or labeled loop, and continues execution of the loop with the next iteration. -->

Empty;-
<!-- An empty statement is used to provide no statement, although the JavaScript syntax would expect one. -->

if...else;-
<!-- Executes a statement if a specified condition is true. If the condition is false, another statement can be executed. -->

switch;-
<!-- Evaluates an expression, matching the expression's value to a case clause, and executes statements associated with that case. -->

throw;-
<!-- Throws a user-defined exception. -->

try...catch;-
<!-- Marks a block of statements to try, and specifies a response, should an exception be thrown. -->

var;-
<!-- Declares a variable, optionally initializing it to a value. -->

let;-
<!-- Declares a block scope local variable, optionally initializing it to a value. -->

const;-
<!-- Declares a read-only named constant. -->

function;-
<!-- Declares a function with the specified parameters. -->

async function;-
<!-- Declares an async function with the specified parameters. -->

return;-
<!-- Specifies the value to be returned by a function. -->

class;-
<!-- Declares a class. -->

do...while;-
<!-- Creates a loop that executes a specified statement until the test condition evaluates to false. The condition is evaluated after executing the statement, resulting in the specified statement executing at least once. -->

for;-
<!-- Creates a loop that consists of three optional expressions, enclosed in parentheses and separated by semicolons, followed by a statement executed in the loop. -->

for each...in;-
<!-- Iterates a specified variable over all values of object's properties. For each distinct property, a specified statement is executed. -->

for...in;-
<!-- Iterates over the enumerable properties of an object, in arbitrary order. For each distinct property, statements can be executed. -->

for...of;-
<!-- Iterates over iterable objects (including arrays, array-like objects, iterators and generators), invoking a custom iteration hook with statements to be executed for the value of each distinct property. -->

for await...of;-
<!-- Iterates over async iterable objects, array-like objects, iterators and generators, invoking a custom iteration hook with statements to be executed for the value of each distinct property. -->

while;-
<!-- Creates a loop that executes a specified statement as long as the test condition evaluates to true. The condition is evaluated before executing the statement. -->

debugger;-
<!-- Invokes any available debugging functionality. If no debugging functionality is available, this statement has no effect. -->

export;-
<!-- Used to export functions to make them available for imports in external modules, and other scripts. -->

import;-
<!-- Used to import functions exported from an external module, another script. -->

import.meta;-
<!-- An object exposing context-specific metadata to a JavaScript module. -->

label;-
<!-- Provides a statement with an identifier that you can refer to using a break or continue statement. -->

with;-
<!-- Extends the scope chain for a statement. -->

this;-
<!-- The this keyword refers to a special property of an execution context. -->

function;-
<!-- The function keyword defines a function expression. -->

class;-
<!-- The class keyword defines a class expression. -->

yield;-
<!-- Pause and resume a generator function. -->

async function;-
<!-- The async function defines an async function expression. -->

await;-
<!-- Pause and resume an async function and wait for the promise's resolution/rejection. -->

new;-
<!-- The new operator creates an instance of a constructor. -->

new.target;-
<!-- In constructors, new.target refers to the constructor that was invoked by new. -->

super;-
<!-- The super keyword calls the parent constructor. -->

delete;-
<!-- The delete operator deletes a property from an object. -->

void;-
<!-- The void operator discards an expression's return value. -->

typeof;-
<!-- The typeof operator determines the type of a given object. -->

in;-
<!-- The in operator determines whether an object has a given property. -->

instanceof;-
<!-- The instanceof operator determines whether an object is an instance of another object. -->

